"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const classNames = require("classnames");
const React = require("react");
const GraphemeSplitter = require("graphemer");
const server = require("react-dom/server");
const reactDropdownMenu = require("@radix-ui/react-dropdown-menu");
const vaul = require("vaul");
const reactForm = require("@radix-ui/react-form");
const reactTooltip = require("@radix-ui/react-tooltip");
require("react-dom");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
const SvgCheckCircle = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M10.6 13.8L8.45 11.65C8.26667 11.4667 8.03333 11.375 7.75 11.375C7.46667 11.375 7.23333 11.4667 7.05 11.65C6.86667 11.8333 6.775 12.0667 6.775 12.35C6.775 12.6333 6.86667 12.8667 7.05 13.05L9.9 15.9C10.1 16.1 10.3333 16.2 10.6 16.2C10.8667 16.2 11.1 16.1 11.3 15.9L16.95 10.25C17.1333 10.0667 17.225 9.83333 17.225 9.55C17.225 9.26667 17.1333 9.03333 16.95 8.85C16.7667 8.66667 16.5333 8.575 16.25 8.575C15.9667 8.575 15.7333 8.66667 15.55 8.85L10.6 13.8ZM12 22C10.6167 22 9.31667 21.7375 8.1 21.2125C6.88333 20.6875 5.825 19.975 4.925 19.075C4.025 18.175 3.3125 17.1167 2.7875 15.9C2.2625 14.6833 2 13.3833 2 12C2 10.6167 2.2625 9.31667 2.7875 8.1C3.3125 6.88333 4.025 5.825 4.925 4.925C5.825 4.025 6.88333 3.3125 8.1 2.7875C9.31667 2.2625 10.6167 2 12 2C13.3833 2 14.6833 2.2625 15.9 2.7875C17.1167 3.3125 18.175 4.025 19.075 4.925C19.975 5.825 20.6875 6.88333 21.2125 8.1C21.7375 9.31667 22 10.6167 22 12C22 13.3833 21.7375 14.6833 21.2125 15.9C20.6875 17.1167 19.975 18.175 19.075 19.075C18.175 19.975 17.1167 20.6875 15.9 21.2125C14.6833 21.7375 13.3833 22 12 22ZM12 20C14.2333 20 16.125 19.225 17.675 17.675C19.225 16.125 20 14.2333 20 12C20 9.76667 19.225 7.875 17.675 6.325C16.125 4.775 14.2333 4 12 4C9.76667 4 7.875 4.775 6.325 6.325C4.775 7.875 4 9.76667 4 12C4 14.2333 4.775 16.125 6.325 17.675C7.875 19.225 9.76667 20 12 20Z", fill: "currentColor" }) });
const SvgError = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12 17C12.2833 17 12.5208 16.9042 12.7125 16.7125C12.9042 16.5208 13 16.2833 13 16C13 15.7167 12.9042 15.4792 12.7125 15.2875C12.5208 15.0958 12.2833 15 12 15C11.7167 15 11.4792 15.0958 11.2875 15.2875C11.0958 15.4792 11 15.7167 11 16C11 16.2833 11.0958 16.5208 11.2875 16.7125C11.4792 16.9042 11.7167 17 12 17ZM12 13C12.2833 13 12.5208 12.9042 12.7125 12.7125C12.9042 12.5208 13 12.2833 13 12V8C13 7.71667 12.9042 7.47917 12.7125 7.2875C12.5208 7.09583 12.2833 7 12 7C11.7167 7 11.4792 7.09583 11.2875 7.2875C11.0958 7.47917 11 7.71667 11 8V12C11 12.2833 11.0958 12.5208 11.2875 12.7125C11.4792 12.9042 11.7167 13 12 13ZM12 22C10.6167 22 9.31667 21.7375 8.1 21.2125C6.88333 20.6875 5.825 19.975 4.925 19.075C4.025 18.175 3.3125 17.1167 2.7875 15.9C2.2625 14.6833 2 13.3833 2 12C2 10.6167 2.2625 9.31667 2.7875 8.1C3.3125 6.88333 4.025 5.825 4.925 4.925C5.825 4.025 6.88333 3.3125 8.1 2.7875C9.31667 2.2625 10.6167 2 12 2C13.3833 2 14.6833 2.2625 15.9 2.7875C17.1167 3.3125 18.175 4.025 19.075 4.925C19.975 5.825 20.6875 6.88333 21.2125 8.1C21.7375 9.31667 22 10.6167 22 12C22 13.3833 21.7375 14.6833 21.2125 15.9C20.6875 17.1167 19.975 18.175 19.075 19.075C18.175 19.975 17.1167 20.6875 15.9 21.2125C14.6833 21.7375 13.3833 22 12 22Z", fill: "currentColor" }) });
const SvgInfo = (props) => /* @__PURE__ */ jsxRuntime.jsxs("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: [
  /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.2875 7.2875C11.4792 7.09583 11.7167 7 12 7C12.2833 7 12.5208 7.09583 12.7125 7.2875C12.9042 7.47917 13 7.71667 13 8C13 8.28333 12.9042 8.52083 12.7125 8.7125C12.5208 8.90417 12.2833 9 12 9C11.7167 9 11.4792 8.90417 11.2875 8.7125C11.0958 8.52083 11 8.28333 11 8C11 7.71667 11.0958 7.47917 11.2875 7.2875Z", fill: "currentColor" }),
  /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M11.2875 11.2875C11.4792 11.0958 11.7167 11 12 11C12.2833 11 12.5208 11.0958 12.7125 11.2875C12.9042 11.4792 13 11.7167 13 12V16C13 16.2833 12.9042 16.5208 12.7125 16.7125C12.5208 16.9042 12.2833 17 12 17C11.7167 17 11.4792 16.9042 11.2875 16.7125C11.0958 16.5208 11 16.2833 11 16V12C11 11.7167 11.0958 11.4792 11.2875 11.2875Z", fill: "currentColor" }),
  /* @__PURE__ */ jsxRuntime.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12Z", fill: "currentColor" })
] });
const SvgClose = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M6.29289 6.29289C6.68342 5.90237 7.31658 5.90237 7.70711 6.29289L12 10.5858L16.2929 6.29289C16.6834 5.90237 17.3166 5.90237 17.7071 6.29289C18.0976 6.68342 18.0976 7.31658 17.7071 7.70711L13.4142 12L17.7071 16.2929C18.0976 16.6834 18.0976 17.3166 17.7071 17.7071C17.3166 18.0976 16.6834 18.0976 16.2929 17.7071L12 13.4142L7.70711 17.7071C7.31658 18.0976 6.68342 18.0976 6.29289 17.7071C5.90237 17.3166 5.90237 16.6834 6.29289 16.2929L10.5858 12L6.29289 7.70711C5.90237 7.31658 5.90237 6.68342 6.29289 6.29289Z", fill: "currentColor" }) });
const alert = "_alert_1bz08_19";
const content = "_content_1bz08_46";
const title$1 = "_title_1bz08_57";
const icon$2 = "_icon_1bz08_57";
const actions = "_actions_1bz08_73";
const styles$j = {
  alert,
  content,
  "text-content": "_text-content_1bz08_53",
  title: title$1,
  icon: icon$2,
  actions
};
const typography = "_typography_yh5dq_162";
const styles$i = {
  "font-body-xs-regular": "_font-body-xs-regular_yh5dq_21",
  "font-body-xs-semibold": "_font-body-xs-semibold_yh5dq_26",
  "font-body-xs-medium": "_font-body-xs-medium_yh5dq_31",
  "font-body-sm-regular": "_font-body-sm-regular_yh5dq_40",
  "font-body-sm-semibold": "_font-body-sm-semibold_yh5dq_45",
  "font-body-sm-medium": "_font-body-sm-medium_yh5dq_50",
  "font-body-md-regular": "_font-body-md-regular_yh5dq_59",
  "font-body-md-semibold": "_font-body-md-semibold_yh5dq_64",
  "font-body-md-medium": "_font-body-md-medium_yh5dq_69",
  "font-body-lg-regular": "_font-body-lg-regular_yh5dq_78",
  "font-body-lg-semibold": "_font-body-lg-semibold_yh5dq_83",
  "font-body-lg-medium": "_font-body-lg-medium_yh5dq_88",
  "font-heading-sm-regular": "_font-heading-sm-regular_yh5dq_97",
  "font-heading-sm-semibold": "_font-heading-sm-semibold_yh5dq_102",
  "font-heading-sm-medium": "_font-heading-sm-medium_yh5dq_107",
  "font-heading-md-regular": "_font-heading-md-regular_yh5dq_116",
  "font-heading-md-semibold": "_font-heading-md-semibold_yh5dq_121",
  "font-heading-lg-regular": "_font-heading-lg-regular_yh5dq_130",
  "font-heading-lg-semibold": "_font-heading-lg-semibold_yh5dq_135",
  "font-heading-xl-regular": "_font-heading-xl-regular_yh5dq_144",
  "font-heading-xl-semibold": "_font-heading-xl-semibold_yh5dq_149",
  typography
};
const Typography = ({
  as,
  children,
  type = "body",
  weight = "regular",
  size = "md",
  className,
  ...restProps
}) => {
  const Component = as || "p";
  return /* @__PURE__ */ jsxRuntime.jsx(
    Component,
    {
      ...restProps,
      className: classNames(
        styles$i.typography,
        styles$i[`font-${type}-${size}-${weight}`],
        className
      ),
      children
    }
  );
};
const Text = ({ as = "p", children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Typography, { as, type: "body", ...props, children });
};
const button = "_button_1ahdh_17";
const styles$h = {
  button,
  "has-icon": "_has-icon_1ahdh_44"
};
const UnstyledButton = React.forwardRef(function UnstyledButton2({
  as,
  children,
  className,
  disabled: disabled2,
  ...props
}, ref) {
  const Component = as || "button";
  const { onClick, onSubmit, ...restProps } = props;
  const eventHandlers = disabled2 ? {} : {
    onClick,
    onSubmit
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    Component,
    {
      ...restProps,
      ref,
      className,
      role: as === "a" ? "link" : "button",
      tabIndex: 0,
      ...eventHandlers,
      "aria-disabled": disabled2,
      children
    }
  );
});
const Button = React.forwardRef(function Button2({
  as,
  kind = "primary",
  size = "lg",
  children,
  className,
  Icon,
  disabled: disabled2,
  ...props
}, ref) {
  const classes = classNames(styles$h.button, className, {
    [styles$h["has-icon"]]: Icon
  });
  return /* @__PURE__ */ jsxRuntime.jsxs(
    UnstyledButton,
    {
      ...props,
      as: as || "button",
      ref,
      className: classes,
      "data-size": size,
      "data-kind": kind,
      tabIndex: 0,
      disabled: disabled2,
      children: [
        Icon && /* @__PURE__ */ jsxRuntime.jsx(
          Icon,
          {
            width: 20,
            height: 20,
            className: styles$h.icon,
            "aria-hidden": true
          }
        ),
        children
      ]
    }
  );
});
const styles$g = {
  "icon-button": "_icon-button_ur2sw_17"
};
const IconButton = React.forwardRef(function IconButton2({ children, className, indicator, size = "32px", style, ...props }, ref) {
  const classes = classNames(styles$g["icon-button"], className);
  return /* @__PURE__ */ jsxRuntime.jsx(
    UnstyledButton,
    {
      as: "button",
      ref,
      className: classes,
      style: {
        "--cpd-icon-button-size": size,
        ...style
      },
      ...props,
      "data-indicator": indicator,
      children: React.Children.only(children)
    }
  );
});
const Alert = ({
  type,
  title: title2,
  children,
  className,
  actions: actions2,
  onClose,
  ...props
}) => {
  const classes = classNames(styles$j.alert, className);
  const renderIcon = React.useCallback(
    (props2) => {
      switch (type) {
        case "critical":
          return /* @__PURE__ */ jsxRuntime.jsx(SvgError, { ...props2 });
        case "info":
          return /* @__PURE__ */ jsxRuntime.jsx(SvgInfo, { ...props2 });
        case "success":
          return /* @__PURE__ */ jsxRuntime.jsx(SvgCheckCircle, { ...props2 });
      }
    },
    [type]
  );
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { ...props, className: classes, "data-type": type, children: [
    renderIcon({
      width: 24,
      height: 24,
      className: styles$j.icon,
      "aria-hidden": true
    }),
    /* @__PURE__ */ jsxRuntime.jsxs("div", { className: styles$j.content, children: [
      /* @__PURE__ */ jsxRuntime.jsxs("div", { className: styles$j["text-content"], children: [
        /* @__PURE__ */ jsxRuntime.jsx(Text, { size: "md", weight: "semibold", children: title2 }),
        /* @__PURE__ */ jsxRuntime.jsx(Text, { size: "sm", weight: "regular", children })
      ] }),
      actions2 && /* @__PURE__ */ jsxRuntime.jsx("div", { className: styles$j.actions, children: actions2 })
    ] }),
    onClose && /* @__PURE__ */ jsxRuntime.jsx(
      IconButton,
      {
        onClick: onClose,
        "aria-label": "Close",
        role: "button",
        className: styles$j.close,
        children: /* @__PURE__ */ jsxRuntime.jsx(SvgClose, {})
      }
    )
  ] });
};
const MX_USERNAME_PREFIX = "@";
const MX_ROOM_PREFIX = "#";
const MX_ALIAS_PREFIX = "+";
function interopDefault(value) {
  if (value.default) {
    return value.default;
  }
  return value;
}
function getInitialLetter(name) {
  if (name.length < 1) {
    return "";
  }
  const initial = name[0];
  if ([MX_USERNAME_PREFIX, MX_ROOM_PREFIX, MX_ALIAS_PREFIX].includes(initial)) {
    name = name.substring(1);
  }
  const splitter = new (interopDefault(GraphemeSplitter))();
  const result = splitter.iterateGraphemes(name).next();
  return result.done ? "" : result.value;
}
const avatar = "_avatar_1o69u_17";
const image = "_image_1o69u_49";
const styles$f = {
  avatar,
  image,
  "avatar-imageless": "_avatar-imageless_1o69u_60",
  "stacked-avatars": "_stacked-avatars_1o69u_120",
  "clip-path": "_clip-path_1o69u_139"
};
function useIdColorHash(id) {
  const MIN = 1;
  const MAX = 8;
  const charCodeSum = id.split("").reduce((sum, char) => {
    return sum + char.charCodeAt(0);
  }, 0);
  return charCodeSum % MAX + MIN;
}
function shouldBeAButton(props) {
  return !!(props.onClick || props.onKeyDown || props.onKeyUp);
}
const Avatar = React.forwardRef(function Avatar2({
  src,
  id,
  name = "",
  type = "round",
  className = "",
  size,
  style = {},
  onError,
  ...props
}, ref) {
  return React.createElement(
    shouldBeAButton(props) ? "button" : "span",
    {
      ref,
      role: "img",
      // Default the aria-label to id
      "aria-label": id,
      ...props,
      "data-type": type,
      "data-color": useIdColorHash(id),
      className: classNames(styles$f.avatar, className, {
        [styles$f["avatar-imageless"]]: !src
      }),
      style: {
        ...style,
        "--cpd-avatar-size": size
      }
    },
    /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: !src ? getInitialLetter(name) : /* @__PURE__ */ jsxRuntime.jsx(
      "img",
      {
        loading: "lazy",
        alt: "",
        src,
        crossOrigin: "anonymous",
        referrerPolicy: "no-referrer",
        className: classNames(styles$f.image),
        "data-type": type,
        style,
        width: size,
        height: size,
        onError
      }
    ) })
  );
});
const SvgAvatarClipmask = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("clipPath", { id: "cpdAvatarClip", clipPathUnits: "objectBoundingBox", children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "         M 0.875 0.16666         A 0.5 0.5 0 1 0 0.875 0.83333         Q 0.65 0.5 0.875 0.16666         Z      " }) }) });
const AVATAR_MASK_ID = "cpdAvatarClipSvg";
let AvatarStackUsageCount = 0;
const AvatarStack = ({ children, className }) => {
  React.useEffect(() => {
    if (AvatarStackUsageCount === 0) {
      const svgMask = server.renderToStaticMarkup(
        /* @__PURE__ */ jsxRuntime.jsx(SvgAvatarClipmask, { id: AVATAR_MASK_ID, className: styles$f["clip-path"] })
      );
      document.body.insertAdjacentHTML("beforeend", svgMask);
    }
    AvatarStackUsageCount++;
    return () => {
      AvatarStackUsageCount--;
      if (AvatarStackUsageCount <= 0) {
        document.getElementById(AVATAR_MASK_ID)?.remove();
      }
    };
  }, []);
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(styles$f["stacked-avatars"], className), children });
};
const badge = "_badge_qipht_17";
const styles$e = {
  badge
};
const Badge = ({
  children,
  kind = "default",
  className
}) => {
  const classes = classNames(styles$e.badge, className);
  return /* @__PURE__ */ jsxRuntime.jsx(
    Typography,
    {
      as: "span",
      size: "sm",
      weight: "medium",
      className: classes,
      "data-kind": kind,
      children
    }
  );
};
const Body = ({
  children,
  ...props
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Text, { ...props, children });
};
const glass = "_glass_1x9g9_17";
const styles$d = {
  glass
};
const Glass = React.forwardRef(
  ({ children, className, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx("div", { ref, className: classNames(className, styles$d.glass), ...rest, children: React.Children.only(children) })
);
Glass.displayName = "Glass";
const Heading = ({ as = "h1", children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Typography, { as, type: "heading", ...props, children });
};
const H1 = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Heading, { as: "h1", weight: "semibold", size: "xl", ...props, children });
};
const H2 = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Heading, { as: "h2", weight: "semibold", size: "lg", ...props, children });
};
const H3 = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Heading, { as: "h3", weight: "semibold", size: "md", ...props, children });
};
const H4 = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Heading, { as: "h4", weight: "semibold", size: "sm", ...props, children });
};
const H5 = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Text, { as: "h5", weight: "semibold", size: "lg", ...props, children });
};
const H6 = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(Text, { as: "h6", weight: "semibold", size: "md", ...props, children });
};
const link = "_link_1mzip_17";
const styles$c = {
  link
};
const Link = React.forwardRef(
  function Link2({ children, className, kind = "primary", ...props }, ref) {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "a",
      {
        ref,
        ...props,
        rel: "noreferrer noopener",
        className: classNames(styles$c.link, className),
        "data-kind": kind,
        children
      }
    );
  }
);
const menu = "_menu_1x5h1_17";
const title = "_title_1x5h1_83";
const styles$b = {
  menu,
  "slide-in": "_slide-in_1x5h1_1",
  "slide-out": "_slide-out_1x5h1_1",
  "fade-in": "_fade-in_1x5h1_1",
  "fade-out": "_fade-out_1x5h1_1",
  title
};
const react18UseId = React__namespace["useId".toString()];
const getUniqueId = (() => {
  let index2 = 1;
  return () => `:r${index2++}:`;
})();
const useIdPonyFill = () => {
  return React__namespace.useMemo(getUniqueId, []);
};
const useId = typeof react18UseId === "function" ? react18UseId : useIdPonyFill;
const FloatingMenu = React.forwardRef(
  ({ title: title2, className, children, ...props }, ref) => {
    const titleId = useId();
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        role: "menu",
        ref,
        "aria-labelledby": titleId,
        className: classNames(className, styles$b.menu),
        ...props,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Text,
            {
              as: "h3",
              id: titleId,
              className: styles$b.title,
              size: "sm",
              weight: "semibold",
              children: title2
            }
          ),
          children
        ]
      }
    );
  }
);
FloatingMenu.displayName = "FloatingMenu";
const bg = "_bg_py3lt_17";
const drawer = "_drawer_py3lt_26";
const body = "_body_py3lt_60";
const drawerMenu = {
  bg,
  drawer,
  body
};
const MenuContext = React.createContext(null);
let platform;
if (/android/i.test(navigator.userAgent)) {
  platform = "android";
} else if (/iPad|iPhone|iPod|Mac/.test(navigator.userAgent) && "ontouchend" in document) {
  platform = "ios";
} else {
  platform = "other";
}
const getPlatform = () => platform;
const DrawerMenu = React.forwardRef(
  ({ title: title2, children, className, ...props }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      ref,
      className: classNames(className, drawerMenu.drawer),
      "aria-label": title2,
      "data-platform": getPlatform(),
      ...props,
      role: "menu",
      children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: drawerMenu.body, children })
    }
  )
);
DrawerMenu.displayName = "DrawerMenu";
const DropdownMenuItemWrapper = ({
  onSelect,
  children
}) => /* @__PURE__ */ jsxRuntime.jsx(reactDropdownMenu.DropdownMenuItem, { onSelect: onSelect ?? void 0, asChild: true, children });
const Menu = ({
  title: title2,
  open,
  onOpenChange,
  trigger,
  children: childrenProp,
  side = "bottom",
  align = "center"
}) => {
  const platform2 = getPlatform();
  const drawer2 = platform2 === "android" || platform2 === "ios";
  const context = React.useMemo(
    () => ({
      MenuItemWrapper: drawer2 ? null : DropdownMenuItemWrapper,
      onOpenChange
    }),
    [onOpenChange]
  );
  const children = /* @__PURE__ */ jsxRuntime.jsx(MenuContext.Provider, { value: context, children: childrenProp });
  return drawer2 ? /* @__PURE__ */ jsxRuntime.jsxs(vaul.Drawer.Root, { open, onOpenChange, children: [
    /* @__PURE__ */ jsxRuntime.jsx(vaul.Drawer.Trigger, { asChild: true, children: trigger }),
    /* @__PURE__ */ jsxRuntime.jsxs(vaul.Drawer.Portal, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(vaul.Drawer.Overlay, { className: classNames(drawerMenu.bg) }),
      /* @__PURE__ */ jsxRuntime.jsx(vaul.Drawer.Content, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(DrawerMenu, { title: title2, children }) })
    ] })
  ] }) : /* @__PURE__ */ jsxRuntime.jsxs(reactDropdownMenu.Root, { open, onOpenChange, children: [
    /* @__PURE__ */ jsxRuntime.jsx(reactDropdownMenu.Trigger, { asChild: true, children: trigger }),
    /* @__PURE__ */ jsxRuntime.jsx(reactDropdownMenu.Portal, { children: /* @__PURE__ */ jsxRuntime.jsx(reactDropdownMenu.Content, { asChild: true, side, align, sideOffset: 8, children: /* @__PURE__ */ jsxRuntime.jsx(FloatingMenu, { title: title2, children }) }) })
  ] });
};
const item = "_item_1bcsk_17";
const interactive = "_interactive_1bcsk_36";
const icon$1 = "_icon_1bcsk_44";
const label$1 = "_label_1bcsk_53";
const disabled = "_disabled_1bcsk_120";
const styles$a = {
  item,
  interactive,
  "no-label": "_no-label_1bcsk_40",
  icon: icon$1,
  label: label$1,
  "nav-hint": "_nav-hint_1bcsk_60",
  disabled
};
const SvgChevronRight = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M8.70005 17.3C8.51672 17.1167 8.42505 16.8834 8.42505 16.6C8.42505 16.3167 8.51672 16.0834 8.70005 15.9L12.6 12L8.70005 8.10005C8.51672 7.91672 8.42505 7.68338 8.42505 7.40005C8.42505 7.11672 8.51672 6.88338 8.70005 6.70005C8.88338 6.51672 9.11672 6.42505 9.40005 6.42505C9.68338 6.42505 9.91672 6.51672 10.1 6.70005L14.7 11.3C14.8 11.4 14.8709 11.5084 14.9125 11.625C14.9542 11.7417 14.975 11.8667 14.975 12C14.975 12.1334 14.9542 12.2584 14.9125 12.375C14.8709 12.4917 14.8 12.6 14.7 12.7L10.1 17.3C9.91672 17.4834 9.68338 17.575 9.40005 17.575C9.11672 17.575 8.88338 17.4834 8.70005 17.3Z", fill: "currentColor" }) });
const MenuItem = ({
  as,
  className,
  Icon,
  label: label2,
  onSelect,
  kind = "primary",
  children,
  onClick: onClickProp,
  disabled: disabled2,
  ...props
}) => {
  const Component = as ?? "button";
  const context = React.useContext(MenuContext);
  const onClick = React.useCallback(
    (e) => {
      onClickProp?.(e);
      if (onSelect !== null && context?.MenuItemWrapper == null) {
        const selectEvent = new CustomEvent("menu.itemSelect", {
          bubbles: true,
          cancelable: true
        });
        onSelect(selectEvent);
        if (!selectEvent.defaultPrevented)
          context?.onOpenChange(false);
      }
    },
    [context, onSelect]
  );
  const content2 = /* @__PURE__ */ jsxRuntime.jsxs(
    Component,
    {
      role: "menuitem",
      ...props,
      className: classNames(className, styles$a.item, {
        [styles$a.interactive]: onSelect !== null,
        [styles$a["no-label"]]: label2 === null,
        [styles$a["disabled"]]: disabled2
      }),
      "data-kind": kind,
      onClick,
      disabled: disabled2,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Icon, { width: 24, height: 24, className: styles$a.icon, "aria-hidden": true }),
        label2 !== null && /* @__PURE__ */ jsxRuntime.jsx(Text, { className: styles$a.label, size: "md", weight: "medium", as: "span", children: label2 }),
        (Component === "button" || Component === "a") && /* @__PURE__ */ jsxRuntime.jsx(
          SvgChevronRight,
          {
            width: 24,
            height: 24,
            className: styles$a["nav-hint"],
            "aria-hidden": true
          }
        ),
        children
      ]
    }
  );
  return context?.MenuItemWrapper == null || onSelect === null ? content2 : /* @__PURE__ */ jsxRuntime.jsx(context.MenuItemWrapper, { onSelect, children: content2 });
};
const search = "_search_95nov_17";
const icon = "_icon_95nov_44";
const input$3 = "_input_95nov_59";
const styles$9 = {
  search,
  icon,
  input: input$3
};
const container$4 = "_container_1p4gy_17";
const control$2 = "_control_1p4gy_22";
const action = "_action_1p4gy_27";
const styles$8 = {
  container: container$4,
  control: control$2,
  action
};
const control$1 = "_control_9gon8_18";
const styles$7 = {
  control: control$1,
  "enable-ligatures": "_enable-ligatures_9gon8_70"
};
const TextInput = React.forwardRef(
  function TextInput2(props, ref) {
    const classes = classNames(
      styles$7.control,
      props.className,
      props.enableLigatures && styles$7["enable-ligatures"]
    );
    return /* @__PURE__ */ jsxRuntime.jsx("input", { ref, ...props, className: classes });
  }
);
const TextControl = React.forwardRef(function TextControl2(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(TextInput, { ref, ...props }) });
});
const tooltip = "_tooltip_svz44_17";
const caption = "_caption_svz44_29";
const arrow = "_arrow_svz44_34";
const styles$6 = {
  tooltip,
  caption,
  arrow
};
const Tooltip = ({
  children,
  label: label2,
  caption: caption2,
  shortcut,
  side = "bottom",
  align = "center",
  onEscapeKeyDown,
  onPointerDownOutside,
  isTriggerInteractive = true,
  nonInteractiveTriggerTabIndex = 0,
  open
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(reactTooltip.Provider, { children: /* @__PURE__ */ jsxRuntime.jsxs(reactTooltip.Root, { open, delayDuration: isTriggerInteractive ? 300 : 0, children: [
    /* @__PURE__ */ jsxRuntime.jsx(reactTooltip.Trigger, { asChild: true, children: isTriggerInteractive ? children : /* @__PURE__ */ jsxRuntime.jsx("span", { tabIndex: nonInteractiveTriggerTabIndex, children }) }),
    /* @__PURE__ */ jsxRuntime.jsx(reactTooltip.Portal, { children: /* @__PURE__ */ jsxRuntime.jsxs(
      reactTooltip.Content,
      {
        side,
        align,
        onEscapeKeyDown,
        onPointerDownOutside,
        className: styles$6.tooltip,
        children: [
          label2,
          (caption2 || shortcut) && /* @__PURE__ */ jsxRuntime.jsx("span", { className: classNames(styles$6.caption, "cpd-theme-dark"), children: caption2 ?? shortcut }),
          /* @__PURE__ */ jsxRuntime.jsx(reactTooltip.Arrow, { width: 10, height: 6, className: styles$6.arrow })
        ]
      }
    ) })
  ] }) });
};
const ActionInput = React.forwardRef(
  function ActionControl2({ Icon, className, actionLabel, onActionClick, ...props }, ref) {
    const id = useId();
    const classes = classNames(styles$8.container, className);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes, id, children: [
      /* @__PURE__ */ jsxRuntime.jsx(TextInput, { ref, ...props, className: styles$8.control }),
      /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { label: actionLabel, children: /* @__PURE__ */ jsxRuntime.jsx(
        "button",
        {
          type: "button",
          className: styles$8.action,
          onClick: onActionClick,
          "aria-controls": id,
          "aria-label": actionLabel,
          children: /* @__PURE__ */ jsxRuntime.jsx(Icon, { "aria-hidden": true })
        }
      ) })
    ] });
  }
);
const ActionControl = React.forwardRef(function ActionControl3(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(ActionInput, { ref, ...props }) });
});
const SvgVisibilityOn = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12 16C13.25 16 14.3125 15.5625 15.1875 14.6875C16.0625 13.8125 16.5 12.75 16.5 11.5C16.5 10.25 16.0625 9.1875 15.1875 8.3125C14.3125 7.4375 13.25 7 12 7C10.75 7 9.68755 7.4375 8.81255 8.3125C7.93755 9.1875 7.50005 10.25 7.50005 11.5C7.50005 12.75 7.93755 13.8125 8.81255 14.6875C9.68755 15.5625 10.75 16 12 16ZM12 14.2C11.25 14.2 10.6125 13.9375 10.0875 13.4125C9.56255 12.8875 9.30005 12.25 9.30005 11.5C9.30005 10.75 9.56255 10.1125 10.0875 9.5875C10.6125 9.0625 11.25 8.8 12 8.8C12.75 8.8 13.3875 9.0625 13.9125 9.5875C14.4375 10.1125 14.7 10.75 14.7 11.5C14.7 12.25 14.4375 12.8875 13.9125 13.4125C13.3875 13.9375 12.75 14.2 12 14.2ZM12 19C9.68338 19 7.56672 18.3875 5.65005 17.1625C3.73338 15.9375 2.28338 14.2833 1.30005 12.2C1.25005 12.1167 1.21672 12.0125 1.20005 11.8875C1.18338 11.7625 1.17505 11.6333 1.17505 11.5C1.17505 11.3667 1.18338 11.2375 1.20005 11.1125C1.21672 10.9875 1.25005 10.8833 1.30005 10.8C2.28338 8.71667 3.73338 7.0625 5.65005 5.8375C7.56672 4.6125 9.68338 4 12 4C14.3167 4 16.4334 4.6125 18.35 5.8375C20.2667 7.0625 21.7167 8.71667 22.7 10.8C22.75 10.8833 22.7834 10.9875 22.8 11.1125C22.8167 11.2375 22.825 11.3667 22.825 11.5C22.825 11.6333 22.8167 11.7625 22.8 11.8875C22.7834 12.0125 22.75 12.1167 22.7 12.2C21.7167 14.2833 20.2667 15.9375 18.35 17.1625C16.4334 18.3875 14.3167 19 12 19ZM12 17C13.8834 17 15.6125 16.5042 17.1875 15.5125C18.7625 14.5208 19.9667 13.1833 20.8 11.5C19.9667 9.81667 18.7625 8.47917 17.1875 7.4875C15.6125 6.49583 13.8834 6 12 6C10.1167 6 8.38755 6.49583 6.81255 7.4875C5.23755 8.47917 4.03338 9.81667 3.20005 11.5C4.03338 13.1833 5.23755 14.5208 6.81255 15.5125C8.38755 16.5042 10.1167 17 12 17Z", fill: "currentColor" }) });
const SvgVisibilityOff = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M16.1 13.3001L14.65 11.8501C14.8 11.0668 14.575 10.3334 13.975 9.6501C13.375 8.96676 12.6 8.7001 11.65 8.8501L10.2 7.4001C10.4834 7.26676 10.7709 7.16676 11.0625 7.1001C11.3542 7.03343 11.6667 7.0001 12 7.0001C13.25 7.0001 14.3125 7.4376 15.1875 8.3126C16.0625 9.1876 16.5 10.2501 16.5 11.5001C16.5 11.8334 16.4667 12.1459 16.4 12.4376C16.3334 12.7293 16.2334 13.0168 16.1 13.3001ZM19.3 16.4501L17.85 15.0501C18.4834 14.5668 19.0459 14.0376 19.5375 13.4626C20.0292 12.8876 20.45 12.2334 20.8 11.5001C19.9667 9.81676 18.7709 8.47926 17.2125 7.4876C15.6542 6.49593 13.9167 6.0001 12 6.0001C11.5167 6.0001 11.0417 6.03343 10.575 6.1001C10.1084 6.16676 9.65005 6.26676 9.20005 6.4001L7.65005 4.8501C8.33338 4.56676 9.03338 4.35426 9.75005 4.2126C10.4667 4.07093 11.2167 4.0001 12 4.0001C14.3834 4.0001 16.525 4.62926 18.425 5.8876C20.325 7.14593 21.75 8.78343 22.7 10.8001C22.75 10.8834 22.7834 10.9876 22.8 11.1126C22.8167 11.2376 22.825 11.3668 22.825 11.5001C22.825 11.6334 22.8125 11.7626 22.7875 11.8876C22.7625 12.0126 22.7334 12.1168 22.7 12.2001C22.3167 13.0501 21.8375 13.8334 21.2625 14.5501C20.6875 15.2668 20.0334 15.9001 19.3 16.4501ZM19.1 21.9001L15.6 18.4501C15.0167 18.6334 14.4292 18.7709 13.8375 18.8626C13.2459 18.9543 12.6334 19.0001 12 19.0001C9.61672 19.0001 7.47505 18.3709 5.57505 17.1126C3.67505 15.8543 2.25005 14.2168 1.30005 12.2001C1.25005 12.1168 1.21672 12.0126 1.20005 11.8876C1.18338 11.7626 1.17505 11.6334 1.17505 11.5001C1.17505 11.3668 1.18338 11.2418 1.20005 11.1251C1.21672 11.0084 1.25005 10.9084 1.30005 10.8251C1.65005 10.0751 2.06672 9.38343 2.55005 8.7501C3.03338 8.11676 3.56672 7.53343 4.15005 7.0001L2.07505 4.9001C1.89172 4.71676 1.80005 4.4876 1.80005 4.2126C1.80005 3.9376 1.90005 3.7001 2.10005 3.5001C2.28338 3.31676 2.51672 3.2251 2.80005 3.2251C3.08338 3.2251 3.31672 3.31676 3.50005 3.5001L20.5 20.5001C20.6834 20.6834 20.7792 20.9126 20.7875 21.1876C20.7959 21.4626 20.7 21.7001 20.5 21.9001C20.3167 22.0834 20.0834 22.1751 19.8 22.1751C19.5167 22.1751 19.2834 22.0834 19.1 21.9001ZM5.55005 8.4001C5.06672 8.83343 4.62505 9.30843 4.22505 9.8251C3.82505 10.3418 3.48338 10.9001 3.20005 11.5001C4.03338 13.1834 5.22922 14.5209 6.78755 15.5126C8.34588 16.5043 10.0834 17.0001 12 17.0001C12.3334 17.0001 12.6584 16.9793 12.975 16.9376C13.2917 16.8959 13.6167 16.8501 13.95 16.8001L13.05 15.8501C12.8667 15.9001 12.6917 15.9376 12.525 15.9626C12.3584 15.9876 12.1834 16.0001 12 16.0001C10.75 16.0001 9.68755 15.5626 8.81255 14.6876C7.93755 13.8126 7.50005 12.7501 7.50005 11.5001C7.50005 11.3168 7.51255 11.1418 7.53755 10.9751C7.56255 10.8084 7.60005 10.6334 7.65005 10.4501L5.55005 8.4001Z", fill: "currentColor" }) });
const showState = {
  isHidden: true,
  icon: SvgVisibilityOff,
  label: "Show",
  type: "password"
};
const hideState = {
  isHidden: false,
  icon: SvgVisibilityOn,
  label: "Hide",
  type: "text"
};
const PasswordInput = React.forwardRef(function PasswordControl2(props, ref) {
  const [{ icon: icon2, label: label2, type }, togglePasswordVisibility] = React.useReducer(
    (state) => !state.isHidden ? showState : hideState,
    showState
  );
  return /* @__PURE__ */ jsxRuntime.jsx(
    ActionInput,
    {
      ref,
      ...props,
      Icon: icon2,
      actionLabel: label2,
      onActionClick: () => togglePasswordVisibility(),
      type
    }
  );
});
const PasswordControl = React.forwardRef(function PasswordControl3(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(PasswordInput, { ref, ...props }) });
});
const container$3 = "_container_9zyti_18";
const control = "_control_9zyti_33";
const digit = "_digit_9zyti_57";
const styles$5 = {
  container: container$3,
  control,
  digit
};
const Digit = ({ filled, selected }) => /* @__PURE__ */ jsxRuntime.jsx(
  "div",
  {
    className: styles$5.digit,
    "aria-hidden": "true",
    "data-filled": filled ? "" : void 0,
    "data-selected": selected ? "" : void 0
  }
);
const MFAInput = React.forwardRef(function MFAInput2({ className, length = 6, ...props }, ref) {
  const classes = classNames(styles$5.container, className);
  const [currentLength, setCurrentLength] = React.useState(0);
  const [selection, setSelection] = React.useState(
    null
  );
  const update = (event) => {
    const input2 = event.currentTarget;
    setCurrentLength(input2.value?.length);
    if (document.activeElement !== input2 || input2.selectionStart === null || input2.selectionEnd === null) {
      setSelection(null);
    } else {
      setSelection([input2.selectionStart, input2.selectionEnd]);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes, children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      "input",
      {
        ...props,
        inputMode: "numeric",
        type: "text",
        minLength: 0,
        maxLength: length,
        className: styles$5.control,
        pattern: `\\d{${length}}`,
        autoComplete: "one-time-code",
        onSelect: update,
        onFocus: update,
        onBlur: update,
        onMouseDown: update,
        onMouseMove: update,
        onMouseUp: update,
        onChange: update,
        ref
      }
    ),
    Array.from(Array(length).keys()).map((index2) => /* @__PURE__ */ jsxRuntime.jsx(
      Digit,
      {
        filled: index2 < currentLength,
        selected: !!selection && index2 >= selection[0] && index2 < selection[1]
      },
      index2
    ))
  ] });
});
const MFAControl = React.forwardRef(function ActionControl4(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(MFAInput, { ref, ...props }) });
});
const SvgCheck = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9.54991 17.5749C9.41658 17.5749 9.29158 17.5541 9.17491 17.5124C9.05824 17.4707 8.94991 17.3999 8.84991 17.2999L4.54991 12.9999C4.36658 12.8166 4.27908 12.5791 4.28741 12.2874C4.29574 11.9957 4.39158 11.7582 4.57491 11.5749C4.75824 11.3916 4.99158 11.2999 5.27491 11.2999C5.55824 11.2999 5.79158 11.3916 5.97491 11.5749L9.54991 15.1499L18.0249 6.6749C18.2082 6.49157 18.4457 6.3999 18.7374 6.3999C19.0291 6.3999 19.2666 6.49157 19.4499 6.6749C19.6332 6.85824 19.7249 7.09574 19.7249 7.3874C19.7249 7.67907 19.6332 7.91657 19.4499 8.0999L10.2499 17.2999C10.1499 17.3999 10.0416 17.4707 9.92491 17.5124C9.80824 17.5541 9.68324 17.5749 9.54991 17.5749Z", fill: "currentColor" }) });
const container$2 = "_container_1jek6_18";
const input$2 = "_input_1jek6_26";
const ui$2 = "_ui_1jek6_27";
const styles$4 = {
  container: container$2,
  input: input$2,
  ui: ui$2
};
const CheckboxInput = React.forwardRef(
  function Checkbox({ className, ...props }, ref) {
    const classes = classNames(styles$4.container, className);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes, children: [
      /* @__PURE__ */ jsxRuntime.jsx("input", { ref, className: styles$4.input, ...props, type: "checkbox" }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: styles$4.ui, children: /* @__PURE__ */ jsxRuntime.jsx(SvgCheck, { "aria-hidden": true }) })
    ] });
  }
);
const CheckboxControl = React.forwardRef(function CheckboxControl2(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(CheckboxInput, { ref, ...props }) });
});
const container$1 = "_container_bdln6_18";
const input$1 = "_input_bdln6_26";
const ui$1 = "_ui_bdln6_27";
const styles$3 = {
  container: container$1,
  input: input$1,
  ui: ui$1
};
const RadioInput = React.forwardRef(function Radio({ className, ...props }, ref) {
  const classes = classNames(styles$3.container, className);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes, children: [
    /* @__PURE__ */ jsxRuntime.jsx("input", { ref, ...props, className: styles$3.input, type: "radio" }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: styles$3.ui })
  ] });
});
const RadioControl = React.forwardRef(function RadioControl2(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(RadioInput, { ref, ...props }) });
});
const container = "_container_ik1u1_18";
const input = "_input_ik1u1_32";
const ui = "_ui_ik1u1_42";
const styles$2 = {
  container,
  input,
  ui
};
const ToggleInput = React.forwardRef(function Toggle({ className, ...props }, ref) {
  const classes = classNames(styles$2.container, className);
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classes, children: [
    /* @__PURE__ */ jsxRuntime.jsx("input", { ref, className: styles$2.input, ...props, type: "checkbox" }),
    /* @__PURE__ */ jsxRuntime.jsx("div", { className: styles$2.ui })
  ] });
});
const ToggleControl = React.forwardRef(function ToggleControl2(props, ref) {
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Control, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(ToggleInput, { ref, ...props }) });
});
const root = "_root_578ve_24";
const field = "_field_578ve_34";
const label = "_label_578ve_67";
const message = "_message_578ve_98";
const styles$1 = {
  root,
  field,
  "inline-field": "_inline-field_578ve_40",
  "inline-field-body": "_inline-field-body_578ve_46",
  "inline-field-control": "_inline-field-control_578ve_52",
  label,
  message,
  "help-message": "_help-message_578ve_104",
  "error-message": "_error-message_578ve_108"
};
const Root = React.forwardRef(
  function Root2({ children, ...props }, ref) {
    const classes = classNames(styles$1.root, props.className);
    return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Root, { ref, ...props, className: classes, children });
  }
);
const Field = React.forwardRef(
  function Field2({ children, ...props }, ref) {
    const classes = classNames(styles$1.field, props.className);
    return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Field, { ref, ...props, className: classes, children });
  }
);
const InlineField = React.forwardRef(
  function InlineField2({ className, control: control2, children, ...props }, ref) {
    const classes = classNames(styles$1["inline-field"], className);
    return /* @__PURE__ */ jsxRuntime.jsxs(reactForm.Field, { ref, ...props, className: classes, children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: styles$1["inline-field-control"], children: control2 }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: styles$1["inline-field-body"], children })
    ] });
  }
);
const Label = React.forwardRef(function Label2({ children, ...props }, ref) {
  const classes = classNames(styles$1.label, props.className);
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Label, { ref, ...props, className: classes, children });
});
const ErrorMessage = React.forwardRef(function ErrorMessage2({ children, className, ...props }, ref) {
  const classes = classNames(
    styles$1.message,
    styles$1["error-message"],
    className
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(reactForm.Message, { ref, ...props, className: classes, children: [
    /* @__PURE__ */ jsxRuntime.jsx(SvgError, {}),
    children
  ] });
});
const HelpMessage = React.forwardRef(function HelpMessage2({ children, className, ...props }, ref) {
  const classes = classNames(styles$1.message, styles$1["help-message"], className);
  return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Message, { ref, ...props, className: classes, children });
});
const Submit = React.forwardRef(
  function Submit2(props, ref) {
    return /* @__PURE__ */ jsxRuntime.jsx(reactForm.Submit, { asChild: true, children: /* @__PURE__ */ jsxRuntime.jsx(Button, { type: "submit", ref, ...props }) });
  }
);
const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ActionControl,
  ActionInput,
  CheckboxControl,
  CheckboxInput,
  ErrorMessage,
  Field,
  HelpMessage,
  InlineField,
  Label,
  MFAControl,
  MFAInput,
  Message: reactForm.Message,
  PasswordControl,
  PasswordInput,
  RadioControl,
  RadioInput,
  Root,
  Submit,
  TextControl,
  TextInput,
  ToggleControl,
  ToggleInput,
  ValidityState: reactForm.ValidityState
}, Symbol.toStringTag, { value: "Module" }));
const SvgSearch = (props) => /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "cpd-icon", ...props, children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.0491 16.4633C13.7873 17.4274 12.2105 18 10.5 18C6.35786 18 3 14.6421 3 10.5C3 6.35786 6.35786 3 10.5 3C14.6421 3 18 6.35786 18 10.5C18 12.2105 17.4274 13.7873 16.4633 15.0491L19.7071 18.2929C20.0976 18.6834 20.0976 19.3166 19.7071 19.7071C19.3166 20.0977 18.6834 20.0977 18.2929 19.7071L15.0491 16.4633ZM16 10.5C16 7.46243 13.5376 5 10.5 5C7.46243 5 5 7.46243 5 10.5C5 13.5376 7.46243 16 10.5 16C13.5376 16 16 13.5376 16 10.5Z", fill: "currentColor" }) });
const Search = ({
  className,
  onChange,
  // TODO: i18n needs to be setup
  placeholder = "Search…",
  name
}) => {
  const classes = classNames(styles$9.search, className);
  const id = useId();
  return /* @__PURE__ */ jsxRuntime.jsx(Field, { name, asChild: true, children: /* @__PURE__ */ jsxRuntime.jsxs(Label, { className: classes, htmlFor: id, children: [
    /* @__PURE__ */ jsxRuntime.jsx(SvgSearch, { className: styles$9.icon, width: 20, height: 20 }),
    /* @__PURE__ */ jsxRuntime.jsx(
      "input",
      {
        id,
        name,
        type: "search",
        placeholder,
        onChange,
        className: styles$9.input
      }
    )
  ] }) });
};
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function $6ed0406888f73fc4$var$setRef(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node) => refs.forEach(
    (ref) => $6ed0406888f73fc4$var$setRef(ref, node)
  );
}
const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ React.forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = React.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (React.Children.count(newElement) > 1)
          return React.Children.only(null);
        return /* @__PURE__ */ React.isValidElement(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ React.createElement($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ React.isValidElement(newElement) ? /* @__PURE__ */ React.cloneElement(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ React.createElement($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
const $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ React.forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ React.isValidElement(children))
    return /* @__PURE__ */ React.cloneElement(children, {
      ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
      ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref) : children.ref
    });
  return React.Children.count(children) > 1 ? React.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable(child) {
  return /* @__PURE__ */ React.isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue)
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      else if (slotPropValue)
        overrideProps[propName] = slotPropValue;
    } else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}
const $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
  const Node = /* @__PURE__ */ React.forwardRef((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
    React.useEffect(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ React.createElement(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node
  };
}, {});
const $89eedd556c436f6a$var$DEFAULT_ORIENTATION = "horizontal";
const $89eedd556c436f6a$var$ORIENTATIONS = [
  "horizontal",
  "vertical"
];
const $89eedd556c436f6a$export$1ff3c3f08ae963c0 = /* @__PURE__ */ React.forwardRef((props, forwardedRef) => {
  const { decorative, orientation: orientationProp = $89eedd556c436f6a$var$DEFAULT_ORIENTATION, ...domProps } = props;
  const orientation = $89eedd556c436f6a$var$isValidOrientation(orientationProp) ? orientationProp : $89eedd556c436f6a$var$DEFAULT_ORIENTATION;
  const ariaOrientation = orientation === "vertical" ? orientation : void 0;
  const semanticProps = decorative ? {
    role: "none"
  } : {
    "aria-orientation": ariaOrientation,
    role: "separator"
  };
  return /* @__PURE__ */ React.createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-orientation": orientation
  }, semanticProps, domProps, {
    ref: forwardedRef
  }));
});
$89eedd556c436f6a$export$1ff3c3f08ae963c0.propTypes = {
  orientation(props, propName, componentName) {
    const propValue = props[propName];
    const strVal = String(propValue);
    if (propValue && !$89eedd556c436f6a$var$isValidOrientation(propValue))
      return new Error($89eedd556c436f6a$var$getInvalidOrientationError(strVal, componentName));
    return null;
  }
};
function $89eedd556c436f6a$var$getInvalidOrientationError(value, componentName) {
  return `Invalid prop \`orientation\` of value \`${value}\` supplied to \`${componentName}\`, expected one of:
  - horizontal
  - vertical

Defaulting to \`${$89eedd556c436f6a$var$DEFAULT_ORIENTATION}\`.`;
}
function $89eedd556c436f6a$var$isValidOrientation(orientation) {
  return $89eedd556c436f6a$var$ORIENTATIONS.includes(orientation);
}
const $89eedd556c436f6a$export$be92b6f5f03c0fe9 = $89eedd556c436f6a$export$1ff3c3f08ae963c0;
const separator = "_separator_1dey0_17";
const styles = {
  separator
};
const SPACING_CUSTOM_PROP = "--cpd-separator-spacing";
const Separator = React.forwardRef(
  ({
    className,
    spacing = "var(--cpd-space-2x)",
    ...props
  }, ref) => {
    const classes = classNames(styles.separator, className);
    React.useEffect(() => {
      const style = ref?.current?.style;
      if (spacing) {
        style?.setProperty(SPACING_CUSTOM_PROP, spacing);
      } else {
        style?.removeProperty(SPACING_CUSTOM_PROP);
      }
    }, [spacing]);
    return /* @__PURE__ */ jsxRuntime.jsx($89eedd556c436f6a$export$be92b6f5f03c0fe9, { ...props, className: classes, ref });
  }
);
Separator.displayName = "Separator";
const ToggleMenuItem = React.forwardRef(
  function ToggleMenuItem2({ className, Icon, label: label2, onSelect, ...toggleProps }, ref) {
    const toggleId = useId();
    return /* @__PURE__ */ jsxRuntime.jsx(
      MenuItem,
      {
        as: "label",
        htmlFor: toggleId,
        role: "menuitemcheckbox",
        className,
        Icon,
        label: label2,
        onSelect,
        children: /* @__PURE__ */ jsxRuntime.jsx(ToggleInput, { id: toggleId, ref, ...toggleProps })
      }
    );
  }
);
const global = "";
Object.defineProperty(exports, "Message", {
  enumerable: true,
  get: () => reactForm.Message
});
Object.defineProperty(exports, "ValidityState", {
  enumerable: true,
  get: () => reactForm.ValidityState
});
exports.ActionControl = ActionControl;
exports.ActionInput = ActionInput;
exports.Alert = Alert;
exports.Avatar = Avatar;
exports.AvatarStack = AvatarStack;
exports.Badge = Badge;
exports.Body = Body;
exports.Button = Button;
exports.Checkbox = CheckboxInput;
exports.CheckboxControl = CheckboxControl;
exports.CheckboxInput = CheckboxInput;
exports.Control = TextControl;
exports.ErrorMessage = ErrorMessage;
exports.Field = Field;
exports.Form = index;
exports.Glass = Glass;
exports.H1 = H1;
exports.H2 = H2;
exports.H3 = H3;
exports.H4 = H4;
exports.H5 = H5;
exports.H6 = H6;
exports.Heading = Heading;
exports.HelpMessage = HelpMessage;
exports.IconButton = IconButton;
exports.InlineField = InlineField;
exports.Label = Label;
exports.Link = Link;
exports.MFAControl = MFAControl;
exports.MFAInput = MFAInput;
exports.Menu = Menu;
exports.MenuItem = MenuItem;
exports.PasswordControl = PasswordControl;
exports.PasswordInput = PasswordInput;
exports.Radio = RadioInput;
exports.RadioControl = RadioControl;
exports.RadioInput = RadioInput;
exports.Root = Root;
exports.Search = Search;
exports.Separator = Separator;
exports.Submit = Submit;
exports.Text = Text;
exports.TextControl = TextControl;
exports.TextInput = TextInput;
exports.Toggle = ToggleInput;
exports.ToggleControl = ToggleControl;
exports.ToggleInput = ToggleInput;
exports.ToggleMenuItem = ToggleMenuItem;
exports.Tooltip = Tooltip;
exports.getInitialLetter = getInitialLetter;
exports.useIdColorHash = useIdColorHash;
//# sourceMappingURL=compound-web.cjs.map
